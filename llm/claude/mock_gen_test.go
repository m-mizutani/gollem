// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package claude_test

import (
	"context"
	"github.com/anthropics/anthropic-sdk-go"
	"github.com/anthropics/anthropic-sdk-go/packages/ssestream"
	"sync"
)

// apiClientMock is a mock implementation of claude.apiClient.
//
//	func TestSomethingThatUsesapiClient(t *testing.T) {
//
//		// make and configure a mocked claude.apiClient
//		mockedapiClient := &apiClientMock{
//			MessagesNewFunc: func(ctx context.Context, params anthropic.MessageNewParams) (*anthropic.Message, error) {
//				panic("mock out the MessagesNew method")
//			},
//			MessagesNewStreamingFunc: func(ctx context.Context, params anthropic.MessageNewParams) *ssestream.Stream[anthropic.MessageStreamEventUnion] {
//				panic("mock out the MessagesNewStreaming method")
//			},
//		}
//
//		// use mockedapiClient in code that requires claude.apiClient
//		// and then make assertions.
//
//	}
type apiClientMock struct {
	// MessagesNewFunc mocks the MessagesNew method.
	MessagesNewFunc func(ctx context.Context, params anthropic.MessageNewParams) (*anthropic.Message, error)

	// MessagesNewStreamingFunc mocks the MessagesNewStreaming method.
	MessagesNewStreamingFunc func(ctx context.Context, params anthropic.MessageNewParams) *ssestream.Stream[anthropic.MessageStreamEventUnion]

	// calls tracks calls to the methods.
	calls struct {
		// MessagesNew holds details about calls to the MessagesNew method.
		MessagesNew []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params anthropic.MessageNewParams
		}
		// MessagesNewStreaming holds details about calls to the MessagesNewStreaming method.
		MessagesNewStreaming []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params anthropic.MessageNewParams
		}
	}
	lockMessagesNew          sync.RWMutex
	lockMessagesNewStreaming sync.RWMutex
}

// MessagesNew calls MessagesNewFunc.
func (mock *apiClientMock) MessagesNew(ctx context.Context, params anthropic.MessageNewParams) (*anthropic.Message, error) {
	if mock.MessagesNewFunc == nil {
		panic("apiClientMock.MessagesNewFunc: method is nil but apiClient.MessagesNew was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params anthropic.MessageNewParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMessagesNew.Lock()
	mock.calls.MessagesNew = append(mock.calls.MessagesNew, callInfo)
	mock.lockMessagesNew.Unlock()
	return mock.MessagesNewFunc(ctx, params)
}

// MessagesNewCalls gets all the calls that were made to MessagesNew.
// Check the length with:
//
//	len(mockedapiClient.MessagesNewCalls())
func (mock *apiClientMock) MessagesNewCalls() []struct {
	Ctx    context.Context
	Params anthropic.MessageNewParams
} {
	var calls []struct {
		Ctx    context.Context
		Params anthropic.MessageNewParams
	}
	mock.lockMessagesNew.RLock()
	calls = mock.calls.MessagesNew
	mock.lockMessagesNew.RUnlock()
	return calls
}

// MessagesNewStreaming calls MessagesNewStreamingFunc.
func (mock *apiClientMock) MessagesNewStreaming(ctx context.Context, params anthropic.MessageNewParams) *ssestream.Stream[anthropic.MessageStreamEventUnion] {
	if mock.MessagesNewStreamingFunc == nil {
		panic("apiClientMock.MessagesNewStreamingFunc: method is nil but apiClient.MessagesNewStreaming was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params anthropic.MessageNewParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockMessagesNewStreaming.Lock()
	mock.calls.MessagesNewStreaming = append(mock.calls.MessagesNewStreaming, callInfo)
	mock.lockMessagesNewStreaming.Unlock()
	return mock.MessagesNewStreamingFunc(ctx, params)
}

// MessagesNewStreamingCalls gets all the calls that were made to MessagesNewStreaming.
// Check the length with:
//
//	len(mockedapiClient.MessagesNewStreamingCalls())
func (mock *apiClientMock) MessagesNewStreamingCalls() []struct {
	Ctx    context.Context
	Params anthropic.MessageNewParams
} {
	var calls []struct {
		Ctx    context.Context
		Params anthropic.MessageNewParams
	}
	mock.lockMessagesNewStreaming.RLock()
	calls = mock.calls.MessagesNewStreaming
	mock.lockMessagesNewStreaming.RUnlock()
	return calls
}
