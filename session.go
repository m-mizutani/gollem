package gollem

import "context"

// Session is a session for the LLM. This can be called to generate content and stream. It's mainly used for Prompt() method, but it also can be used for one-shot content generation.
type Session interface {
	GenerateContent(ctx context.Context, input ...Input) (*Response, error)
	GenerateStream(ctx context.Context, input ...Input) (<-chan *Response, error)
	History() (*History, error)
}

// SessionConfig is the configuration for the new session. This is required for only LLM client implementations.
type SessionConfig struct {
	history      *History
	contentType  ContentType
	systemPrompt string
	tools        []Tool

	// Middleware fields (ToolMiddleware excluded - managed at Agent layer)
	contentBlockMiddlewares  []ContentBlockMiddleware
	contentStreamMiddlewares []ContentStreamMiddleware
}

// History returns the history of the session.
func (c *SessionConfig) History() *History {
	return c.history
}

// SystemPrompt returns the system prompt of the session.
func (c *SessionConfig) SystemPrompt() string {
	return c.systemPrompt
}

// ContentType returns the content type of the session.
func (c *SessionConfig) ContentType() ContentType {
	return c.contentType
}

// Tools returns the tools of the session.
func (c *SessionConfig) Tools() []Tool {
	return c.tools
}

// ContentBlockMiddlewares returns the content block middlewares of the session.
func (c *SessionConfig) ContentBlockMiddlewares() []ContentBlockMiddleware {
	return c.contentBlockMiddlewares
}

// ContentStreamMiddlewares returns the content stream middlewares of the session.
func (c *SessionConfig) ContentStreamMiddlewares() []ContentStreamMiddleware {
	return c.contentStreamMiddlewares
}

// NewSessionConfig creates a new session configuration. This is required for only LLM client implementations.
func NewSessionConfig(options ...SessionOption) SessionConfig {
	cfg := SessionConfig{}
	for _, option := range options {
		option(&cfg)
	}
	return cfg
}

// SessionOption is the option for the session configuration. This is required for only LLM client implementations.
type SessionOption func(cfg *SessionConfig)

// WithSessionHistory sets the history for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionHistory(history))
func WithSessionHistory(history *History) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.history = history
	}
}

// WithSessionContentType sets the content type for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionContentType(gollem.ContentTypeJSON))
func WithSessionContentType(contentType ContentType) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.contentType = contentType
	}
}

// WithSessionTools sets the tools for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionTools(tools))
func WithSessionTools(tools ...Tool) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.tools = append(cfg.tools, tools...)
	}
}

// WithSessionSystemPrompt sets the system prompt for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionSystemPrompt("You are a helpful assistant."))
func WithSessionSystemPrompt(systemPrompt string) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.systemPrompt = systemPrompt
	}
}

// WithSessionContentBlockMiddleware sets the content block middlewares for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionContentBlockMiddleware(middleware1, middleware2))
func WithSessionContentBlockMiddleware(middlewares ...ContentBlockMiddleware) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.contentBlockMiddlewares = append(cfg.contentBlockMiddlewares, middlewares...)
	}
}

// WithSessionContentStreamMiddleware sets the content stream middlewares for the session.
// Usage:
// session, err := llmClient.NewSession(ctx, gollem.WithSessionContentStreamMiddleware(middleware1, middleware2))
func WithSessionContentStreamMiddleware(middlewares ...ContentStreamMiddleware) SessionOption {
	return func(cfg *SessionConfig) {
		cfg.contentStreamMiddlewares = append(cfg.contentStreamMiddlewares, middlewares...)
	}
}

// ContentType represents the type of content to be generated by the LLM.
type ContentType string

const (
	// ContentTypeText represents plain text content.
	ContentTypeText ContentType = "text"
	// ContentTypeJSON represents JSON content.
	ContentTypeJSON ContentType = "json"
)
